FROM container-registry.oracle.com/graalvm/jdk:24 AS builder

RUN microdnf install -y maven && microdnf clean all

# Docker with GitHub Actions does not persist cache mounts
# as a workaround, we fetch maven deps first and rely on layer caching
# also, we allow overriding the mount to a BIND mount to inject graalvm-setup managed Maven cache
ARG MAVEN_MOUNT_TYPE=cache
ARG MAVEN_MOUNT_SOURCE=""

WORKDIR /app

COPY pom.xml .
COPY client/pom.xml client/pom.xml
COPY server/pom.xml server/pom.xml
COPY util/pom.xml util/pom.xml

RUN --mount=type=${MAVEN_MOUNT_TYPE},source=${MAVEN_MOUNT_SOURCE},target=/root/.m2/repository mvn -B dependency:go-offline

COPY client/ client/
COPY server/ server
COPY util/ util
COPY descriptors/ descriptors
ARG GIT_COMMIT=master
RUN echo "git.commit.id=${GIT_COMMIT}" > server/src/main/resources/git.properties

RUN --mount=type=${MAVEN_MOUNT_TYPE},source=${MAVEN_MOUNT_SOURCE},target=/root/.m2/repository mvn -B -DskipTests -Pdocker-build package

FROM container-registry.oracle.com/graalvm/jdk:24 AS slim

ENV JAVA_MODULES=\
java.base,\
java.desktop,\
java.logging,\
java.sql,\
java.xml,\
java.security.sasl,\
jdk.graal.compiler,\
jdk.internal.vm.ci,\
jdk.unsupported,\
org.graalvm.truffle.compiler

# Build a slim runtime image with just what's needed
RUN $JAVA_HOME/bin/jlink \
    --strip-debug --no-header-files --no-man-pages --compress=2 \
    --add-modules $JAVA_MODULES \
    --output /opt/graalvm-slim

FROM oraclelinux:9-slim

# Create non-root user, home dir is needed so Graal can write attach files for JIT-enabled JS.
RUN useradd -u 1000 -m -s /sbin/nologin reservoir

# Copy slim runtime
COPY --from=slim /opt/graalvm-slim /opt/graalvm-slim

# Copy app JAR
COPY --from=builder /app/server/target/mod-reservoir-server-fat.jar /reservoir.jar
RUN chown reservoir:reservoir /reservoir.jar

# Switch to non-root user
USER reservoir

ENV JAVA_OPTS=""
ENV JAVA_HOME=/opt/graalvm-slim
ENV PATH="$JAVA_HOME/bin:${PATH}"
ENV GRAAL_OPTS="\
--sun-misc-unsafe-memory-access=allow \
--enable-native-access=ALL-UNNAMED"

ENV HTTP_PORT=8081
EXPOSE $HTTP_PORT

ENTRYPOINT ["sh", "-c", "$JAVA_HOME/bin/java -Dport=$HTTP_PORT $JAVA_OPTS $GRAAL_OPTS -jar /reservoir.jar"]
